
* Current TODO list
Before uploading this to GitHub, I should
 - Double-check the initial [[https://github.com/r-spatial/sf/issues/329][conversation with Edzer]] about what he
   hoped for.
 - Get a better example of using gdalwarp (??)
 - Create a test suite showing that the results produced by
   gdalUtilities (with GDAL inside) and gdalUtils (making system calls
   to external GDAL) are checksum identical.
 - In help pages, link to related GDAL documentation pages (as, for
   example, here: http://www.gdal.org/ogr2ogr.html).
 - Check implementation of variable length and repeatable arguments.
 - Document  usage of variable length and repeatable arguments.
 - Add an option (to each function?) for just returning the command
   line equivalent of the current call.

* From where does/should data come?
 - My ~"maunga.tif"~ is derived from the dataset shipped with
   *gdistance*, got by doing:
   #+BEGIN_SRC R
   raster(system.file("external/maungawhau.grd", package="gdistance"))
   #+END_SRC

 -  Similarly, my ~"europe.tif"~ is also gotten from *gdistance*, by
   doing:
   #+BEGIN_SRC R
   raster(system.file("external/Europe.grd", package="gdistance"))
   #+END_SRC

* Utilities provided by stars::gdal_utils()

- [X] ~gdalinfo~
- [X] ~gdalwarp~
- [X] ~gdal_rasterize~
- [X] ~gdal_translate~
- [X] ~ogr2ogr~ a.k.a. ~gdalvectortranslate~ ([[http://www.gdal.org/gdal__utils_8h.html#aa176ae667bc857ab9c6016dbe62166eb][here]] and [[https://github.com/OSGeo/gdal/blob/a1df7cb9df2fe3cbcfac974b434b01ac6a1946e5/gdal/apps/ogr2ogr_lib.cpp][here]]) (via
  ~vectortranslate~)
- [X] ~gdalbuildvrt~
- [X] ~gdaldem~
- [X] ~nearblack~
- [X] ~gdal_grid~

* Utilities taking more than one list of options
It's looking (?) like this only applies to gdaldemprocessing. For it,
the two additional arguments are ~pszProcessing~ and (one of
"hillshade", "slope", "aspect", "color-relief", "TRI", "TPI", and
"Roughness") and ~pszColorFilename~ (mandatory for "color-relief"
processing, should be NULL otherwise, with Edzer's code already
handling the NULL case).

Here, for comparison's sake, is the way it and ~nearblack~ are called
in ~stars::gdal_utils()~:

#+BEGIN_SRC R
demprocessing = CPL_gdaldemprocessing(source, destination, options, processing, colorfilename)
nearblack = CPL_gdalnearblack(source, destination, options)
#+END_SRC

*stars* package Rcpp code [[file:c:/gitRepos/stars/src/utils.cpp::Rcpp::LogicalVector%20CPL_gdaldemprocessing(Rcpp::CharacterVector%20src,%20Rcpp::CharacterVector%20dst,][here]], signature [[http://www.gdal.org/gdal__utils_8h.html#a5d8486d2fd4a7a39bc954eb7f4410053][here]], C++ code [[https://github.com/OSGeo/gdal/blob/a1df7cb9df2fe3cbcfac974b434b01ac6a1946e5/gdal/apps/gdaldem_lib.cpp#L3228][here]].

* Command-line examples of each underlying utility
** ogr2ogr()

#+BEGIN_SRC R 
src_datasource_name <- system.file("external/tahoe_highrez_training.shp", package="gdalUtils")
dst_datasource_name <- paste(tempfile(),".shp",sep="")
# reproject the input to mercator
gdUtils::r_ogr2ogr(src_datasource_name,dst_datasource_name,
                   layer = "tahoe_highrez_training", t_srs="EPSG:3395")
library(gdalUtils)
ogrinfo(src_datasource_name,"tahoe_highrez_training")
ogrinfo(dirname(dst_datasource_name),layer=remove_file_extension(basename(dst_datasource_name)))
ogrinfo(dirname(dst_datasource_name),layer="tahoe_highrez_training")

dst_datasource_name <- paste(tempfile(),".kml",sep="")
gdUtils::r_ogr2ogr(src_datasource_name, dst_datasource_name, 
                   layer = "tahoe_highrez_training", f="KML")
#+END_SRC 

** nearblack()
- [[http://www.gdal.org/rgb2pct.html][Here]] is a tangentially related utility that may show how to specify
  non-white/black colors via the ~-colors~ argument of ~nearblack()~
- Need to test, from the command line, what is the effect of using it
  with and without an ~-o~ (outfile) argument. *ANSWER:* It works both
  ways, because the command-line binary is processed by code that
  checks whether the outfile argument is left ~null~, and if so,
  "fills it in" with the value of the infile. (See [[https://github.com/OSGeo/gdal/blob/trunk/gdal/apps/nearblack_bin.cpp#L132-L134][here]] and [[https://github.com/OSGeo/gdal/blob/trunk/gdal/apps/nearblack_bin.cpp#L142-L146][here]].)

* Argument-processing complications
** Formals taking variable number of arguments
- In [[http://www.gdal.org/ogr2ogr.html][~ogr2ogr~]], for example, the ~-clipsrc~ formal has this signature:
  ~-clipsrc [xmin ymin xmax ymax]|WKT|datasource|spat_extent~

** Repeatable formals with variable numbers of arguments.
- In [[http://www.gdal.org/gdal_translate.html][~gdal_translate~]], the ~-gcp~ formal has the following signature:
  ~[-gcp pixel line easting northing [elevation]]*~


